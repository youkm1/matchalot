package com.smwu.matchalot.application.service;

import com.smwu.matchalot.application.event.MatchEvent;
import com.smwu.matchalot.domain.model.entity.Match;
import com.smwu.matchalot.domain.model.entity.StudyMaterial;
import com.smwu.matchalot.domain.model.vo.*;
import com.smwu.matchalot.domain.repository.MatchRepository;
import com.smwu.matchalot.domain.repository.StudyMaterialRepository;
import com.smwu.matchalot.domain.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.context.ApplicationEventPublisher;
import org.springframework.stereotype.Service;
import org.springframework.transaction.reactive.TransactionalOperator;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

import java.util.Map;

@Service
@RequiredArgsConstructor
@Slf4j
public class MatchService {

    private final MatchRepository matchRepository;
    private final StudyMaterialRepository studyMaterialRepository;
    private final UserRepository userRepository;
    private final UserService userService;
    private final ApplicationEventPublisher eventPublisher;
    private final TransactionalOperator transactionalOperator;
    private final NotificationService notificationService;

    public Mono<Match> requestMatch(UserId requesterId, StudyMaterialId requesterMaterialId, UserId receiverId) {
        long startTime = System.currentTimeMillis();
        log.info("üöÄ requestMatch ÏãúÏûë - requesterId: {}, materialId: {}, receiverId: {}", 
            requesterId.value(), requesterMaterialId.value(), receiverId.value());
        
        return transactionalOperator.transactional(validateMatchRequest(requesterId, requesterMaterialId, receiverId)
                .doOnNext(v -> log.info("‚è±Ô∏è Validation completed in {}ms", 
                    System.currentTimeMillis() - startTime))
                .doOnError(ex -> log.error("‚ùå Validation Ïã§Ìå®: {}", ex.getMessage()))
                .flatMap(ignored -> findPartnerMaterial(receiverId, requesterMaterialId))
                .doOnNext(m -> log.info("‚è±Ô∏è Partner material found in {}ms", 
                    System.currentTimeMillis() - startTime))
                .flatMap(partnerMaterial -> {
                    Match newMatch = new Match(requesterId, receiverId, requesterMaterialId, partnerMaterial.getId());
                    return matchRepository.save(newMatch)
                            .flatMap(match -> {
                                long eventStart = System.currentTimeMillis();
                                log.info("‚è±Ô∏è Match saved to DB in {}ms", eventStart - startTime);
                                
                                // Îß§Ïπ≠ ÏöîÏ≤≠Î∞õÏùÄ ÏÇ¨Ïö©ÏûêÏóêÍ≤å ÏïåÎ¶º Ï†ÑÏÜ°
                                return userRepository.findById(requesterId)
                                        .flatMap(requester -> 
                                                notificationService.notifyMatchRequestReceived(
                                                        receiverId,
                                                        requester.getNickname(),
                                                        match.getId().value()
                                                ))
                                        .then(Mono.just(match))
                                        .doOnSuccess(m -> {
                                            log.info("‚è±Ô∏è Notification sent in {}ms", 
                                                System.currentTimeMillis() - eventStart);
                                            log.info("‚úÖ Total match request processing time: {}ms", 
                                                System.currentTimeMillis() - startTime);
                                        });
                            });
                })
        )       .doOnError(error -> log.error("Îß§Ïπ≠ ÏöîÏ≤≠ Ïã§Ìå®", error));
    }

    public Mono<Match> acceptMatch(MatchId matchId, UserId userId) {
        long startTime = System.currentTimeMillis();
        
        return matchRepository.findById(matchId)
                .switchIfEmpty(Mono.error(new IllegalArgumentException("Îß§Ïπ≠ÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§")))
                .flatMap(match -> {
                    if (!match.getReceiverId().equals(userId)) {
                        return Mono.error(new IllegalStateException("Îß§Ïπ≠ÏùÑ ÏàòÎùΩÌï† Í∂åÌïúÏù¥ ÏóÜÏäµÎãàÎã§"));
                    }
                    Match acceptedMatch = match.accept();
                    return matchRepository.save(acceptedMatch)
                            .doOnNext(m -> {
                                long eventStart = System.currentTimeMillis();
                                log.info("Match accepted and saved in {}ms",
                                    eventStart - startTime);
                                
                                eventPublisher.publishEvent(new MatchEvent(
                                        this,
                                        match.getRequesterId().value().toString(),
                                        "MATCH_ACCEPTED",
                                        Map.of(
                                                "matchId", m.getId().value(),
                                                "accepterId", userId.value()
                                        )
                                ));
                                
                                log.info("Accept event published in {}ms",
                                    System.currentTimeMillis() - eventStart);
                                log.info("Total match accept processing time: {}ms",
                                    System.currentTimeMillis() - startTime);
                            });
                });
    }

    public Mono<Match> rejectMatch(MatchId matchId, UserId userId) {
        return matchRepository.findById(matchId)
                .switchIfEmpty(Mono.error(new IllegalArgumentException("Îß§Ïπ≠ÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§")))
                .flatMap(match -> {
                    if (!match.getReceiverId().equals(userId)) {
                        return Mono.error(new IllegalStateException("Îß§Ïπ≠ÏùÑ Í±∞Ï†àÌï† Í∂åÌïúÏù¥ ÏóÜÏäµÎãàÎã§"));
                    }
                    Match rejectedMatch = match.reject();
                    return matchRepository.save(rejectedMatch)
                            .doOnNext(m -> {
                                eventPublisher.publishEvent(new MatchEvent(
                                        this,
                                        match.getRequesterId().value().toString(),
                                        "MATCH_REJECTED",
                                        Map.of(
                                                "matchId", m.getId().value(),
                                                "rejecterId", userId.value()
                                        )
                                ));
                            });
                });
    }

    public Mono<Match> completeMatch(MatchId matchId, UserId userId) {
        return transactionalOperator.transactional(
            matchRepository.findById(matchId)
                .switchIfEmpty(Mono.error(new IllegalArgumentException("Îß§Ïπ≠ÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§")))
                .flatMap(match -> {
                    if (!match.isParticipant(userId)) {
                        return Mono.error(new IllegalStateException("Îß§Ïπ≠ Ï∞∏Ïó¨ÏûêÍ∞Ä ÏïÑÎãôÎãàÎã§"));
                    }
                    if (match.getStatus() != MatchStatus.ACCEPTED) {
                        return Mono.error(new IllegalStateException("ÏàòÎùΩÎêú Îß§Ïπ≠Îßå ÏôÑÎ£åÌï† Ïàò ÏûàÏäµÎãàÎã§"));
                    }

                    Match completedMatch = match.complete();
                    return matchRepository.save(completedMatch)
                            .flatMap(m -> {
                                Mono<Void> updateRequesterScore = userService.updateTrustScore(
                                        match.getRequesterId(), true).then();
                                Mono<Void> updateReceiverScore = userService.updateTrustScore(
                                        match.getReceiverId(), true).then();

                                // ÏñëÏ™Ω ÏÇ¨Ïö©ÏûêÏóêÍ≤å Îß§Ïπ≠ ÏôÑÎ£å ÏïåÎ¶º ÏÉùÏÑ±
                                Mono<Void> notifyRequester = userRepository.findById(match.getReceiverId())
                                        .flatMap(receiver -> studyMaterialRepository.findById(match.getRequesterMaterialId())
                                                .flatMap(material -> notificationService.notifyMatchCompleted(
                                                        match.getRequesterId(),
                                                        receiver.getNickname(),
                                                        material.getTitle(),
                                                        m.getId().value()
                                                )))
                                        .then();
                                
                                Mono<Void> notifyReceiver = userRepository.findById(match.getRequesterId())
                                        .flatMap(requester -> studyMaterialRepository.findById(match.getReceiverMaterialId())
                                                .flatMap(material -> notificationService.notifyMatchCompleted(
                                                        match.getReceiverId(),
                                                        requester.getNickname(),
                                                        material.getTitle(),
                                                        m.getId().value()
                                                )))
                                        .then();

                                return Mono.when(updateRequesterScore, updateReceiverScore, notifyRequester, notifyReceiver)
                                        .thenReturn(m);
                            })
                            .doOnNext(m -> {
                                // Îß§Ïπ≠ ÏôÑÎ£å Ïù¥Î≤§Ìä∏ Î∞úÌñâ (ÏñëÏ™Ω Î™®ÎëêÏóêÍ≤å ÏïåÎ¶º)
                                String otherUserId = userId.equals(match.getRequesterId()) 
                                    ? match.getReceiverId().value().toString()
                                    : match.getRequesterId().value().toString();
                                
                                eventPublisher.publishEvent(new MatchEvent(
                                        this,
                                        otherUserId,
                                        "MATCH_COMPLETED",
                                        Map.of(
                                                "matchId", m.getId().value(),
                                                "completedBy", userId.value(),
                                                "trustScoreUpdated", true
                                        )
                                ));
                                
                                log.info("‚úÖ Îß§Ïπ≠ ÏôÑÎ£å: matchId={}, completedBy={}", 
                                    m.getId().value(), userId.value());
                            });
                })
        );
    }

    private Mono<StudyMaterial> findPartnerMaterial(UserId partnerId, StudyMaterialId requesterMaterialId) {
        return studyMaterialRepository.findById(requesterMaterialId)
                .doOnNext(m -> log.info("üìö ÏöîÏ≤≠Ïûê ÏûêÎ£å Ï°∞Ìöå ÏÑ±Í≥µ: id={}, subject={}, examType={}, year={}, season={}, status={}", 
                    m.getId().value(), m.getSubject(), m.getExamType(), 
                    m.getSemester().year(), m.getSemester().season(), m.getStatus()))
                .switchIfEmpty(Mono.defer(() -> {
                    log.error("‚ùå ÏöîÏ≤≠Ïûê ÏûêÎ£åÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏùå: materialId={}", requesterMaterialId.value());
                    return Mono.error(new IllegalArgumentException("ÏöîÏ≤≠Ïûê ÏûêÎ£åÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§: " + requesterMaterialId.value()));
                }))
                .flatMap(requesterMaterial -> {
                    log.info("üîç ÌååÌä∏ÎÑà ÏûêÎ£å Í≤ÄÏÉâ - partnerId: {}, subject: {}, examType: {}, year: {}, season: {}", 
                        partnerId.value(), 
                        requesterMaterial.getSubject(), 
                        requesterMaterial.getExamType(),
                        requesterMaterial.getSemester().year(),
                        requesterMaterial.getSemester().season());
                    
                    return studyMaterialRepository.findByUploaderIdAndSubjectAndExamType(
                            partnerId,
                            requesterMaterial.getSubject(),
                            requesterMaterial.getExamType()
                    )
                    .doOnNext(material -> log.info("üîç Ï∞æÏùÄ ÌååÌä∏ÎÑà ÏûêÎ£å: id={}, status={}, year={}, season={}, title={}", 
                        material.getId().value(), material.getStatus(), 
                        material.getSemester().year(), material.getSemester().season(), material.getTitle()))
                    // ÏäπÏù∏Îêú ÏûêÎ£åÎßå ÌïÑÌÑ∞ÎßÅ
                    .filter(material -> {
                        boolean isApproved = material.getStatus() == com.smwu.matchalot.domain.model.vo.MaterialStatus.APPROVED;
                        log.info("üéØ ÏäπÏù∏ ÏÉÅÌÉú ÌïÑÌÑ∞: material_id={}, status={}, isApproved={}", 
                            material.getId().value(), material.getStatus(), isApproved);
                        return isApproved;
                    })
                    // Í∞ôÏùÄ ÎÖÑÎèÑ, ÌïôÍ∏∞ ÌïÑÌÑ∞ÎßÅ (ÏÑ†ÌÉùÏÇ¨Ìï≠ - ÎπÑÏ¶àÎãàÏä§ ÏöîÍµ¨ÏÇ¨Ìï≠Ïóê Îî∞Îùº)
                    .filter(material -> {
                        boolean yearMatch = material.getSemester().year() == requesterMaterial.getSemester().year();
                        boolean seasonMatch = material.getSemester().season().equals(requesterMaterial.getSemester().season());
                        log.info("üìÖ ÌïôÍ∏∞ ÌïÑÌÑ∞: material_id={}, material_year={}, requester_year={}, material_season={}, requester_season={}, yearMatch={}, seasonMatch={}", 
                            material.getId().value(),
                            material.getSemester().year(), requesterMaterial.getSemester().year(),
                            material.getSemester().season(), requesterMaterial.getSemester().season(),
                            yearMatch, seasonMatch);
                        return yearMatch && seasonMatch;
                    })
                    .next()
                    .switchIfEmpty(Mono.error(new IllegalArgumentException(
                        String.format("Îß§Ïπ≠ ÏÉÅÎåÄÎ∞©Ïù¥ Ìï¥Îãπ Í≥ºÎ™©(%s), ÏãúÌóòÏú†Ìòï(%s), ÌïôÍ∏∞(%d-%s)Ïùò ÏäπÏù∏Îêú ÏûêÎ£åÎ•º Î≥¥Ïú†ÌïòÏßÄ ÏïäÏäµÎãàÎã§",
                            requesterMaterial.getSubject().name(),
                            requesterMaterial.getExamType().type(),
                            requesterMaterial.getSemester().year(),
                            requesterMaterial.getSemester().season())
                    )))
                    .doOnNext(found -> log.info("‚úÖ Îß§Ïπ≠ ÌååÌä∏ÎÑà ÏûêÎ£å Î∞úÍ≤¨: {}", found.getTitle()))
                    .doOnError(error -> log.warn("‚ùå Îß§Ïπ≠ ÌååÌä∏ÎÑà ÏûêÎ£å ÏóÜÏùå: {}", error.getMessage()));
                });
    }

    public Flux<StudyMaterial> findPotentialMatches(UserId userId, StudyMaterialId materialId) {
        return studyMaterialRepository.findById(materialId)
                .flatMapMany(material -> {
                    return studyMaterialRepository.findBySubjectAndExamType(
                            material.getSubject(),
                            material.getExamType()
                    ).filter(m -> !m.getUploaderId().equals(userId));
                });
    }

    public Flux<Match> getReceivedRequests(UserId userId) {
        return matchRepository.findByReceiverId(userId)
                .filter(match -> match.getStatus() == MatchStatus.PENDING);
    }

    public Flux<Match> getSentRequests(UserId userId) {
        return matchRepository.findByRequesterId(userId)
                .filter(match -> match.getStatus() == MatchStatus.PENDING);
    }

    public Flux<Match> getMyMatches(UserId userId) {
        return matchRepository.findByUserIdInvolved(userId);
    }

    private Mono<Void> validateMatchRequest(UserId requesterId, StudyMaterialId requesterMaterialId, UserId partnerId) {
        log.info("üîç validateMatchRequest ÏãúÏûë - requesterId: {}, materialId: {}, partnerId: {}", 
            requesterId.value(), requesterMaterialId.value(), partnerId.value());
            
        if (requesterId.equals(partnerId)) {
            log.error("‚ùå Î≥∏Ïù∏Í≥º Îß§Ïπ≠ ÏãúÎèÑ: requesterId={}, partnerId={}", requesterId.value(), partnerId.value());
            return Mono.error(new IllegalArgumentException("Î≥∏Ïù∏Í≥ºÎäî Îß§Ïπ≠Ìï† Ïàò ÏóÜÏäµÎãàÎã§"));
        }

        return userRepository.findById(requesterId)
                .doOnNext(user -> log.info("‚úÖ ÏöîÏ≤≠Ïûê Ï°∞Ìöå ÏÑ±Í≥µ: id={}, participable={}", 
                    user.getId().value(), user.participableInMatch()))
                .switchIfEmpty(Mono.error(new IllegalArgumentException("ÏöîÏ≤≠Ïûê Ï†ïÎ≥¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§")))
                .flatMap(requester -> {
                    if (!requester.participableInMatch()) {
                        log.error("‚ùå Îß§Ïπ≠ Ï∞∏Ïó¨ Î∂àÍ∞Ä: trustScore={}", requester.getTrustScore().value());
                        return Mono.error(new IllegalStateException("Îß§Ïπ≠Ïóê Ï∞∏Ïó¨Ìï† Ïàò ÏóÜÎäî ÏÉÅÌÉúÏûÖÎãàÎã§. Ïã†Î¢∞ÎèÑÎ•º ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî."));
                    }
                    log.info("‚úÖ validateMatchRequest ÏôÑÎ£å");
                    return Mono.empty();
                });
    }

    public Mono<Boolean> hasCompletedMatch(UserId userId, StudyMaterialId materialId) {
        return matchRepository.findCompletedMatchByUserAndMaterial(userId, materialId)
                .hasElement();
    }

    public Flux<Match> getActiveMatches(UserId userId) {
        return matchRepository.findByUserIdInvolved(userId)
                .filter(match -> match.getStatus().isActive())
                .filter(match -> !match.isExpired());
    }


    public Mono<Long> cleanupExpiredMatches() {
        return transactionalOperator.transactional(
            matchRepository.findExpiredMatches()
                .flatMap(match -> matchRepository.save(match.expire()))
                .count()
        );
    }
}