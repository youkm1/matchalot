spring:
  application:
    name: matchalot
    email: ${ADMIN_EMAIL}
  mail:
    host: ${MAIL_HOST:smtp.gmail.com}
    port: ${MAIL_PORT:587}
    username: ${MAIL_USERNAME}
    password: ${MAIL_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
            required: true
          timeout: 5000
  
  r2dbc:
    url: r2dbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_NAME}?sslmode=require
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
  
  datasource:
    url: jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_NAME}?sslmode=require
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    driver-class-name: org.postgresql.Driver
  
  flyway:
    enabled: true
    locations: classpath:db/migration
    baseline-on-migrate: true
    
  
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            scope:
              - openid
              - email
              - profile
            redirect-uri: https://api.match-a-lot.store/login/oauth2/code/google
            authorization-grant-type: authorization_code

jwt:
  secret: ${JWT_SECRET}
  expiration: 86400000

app:
  frontend:
    # 이것도 공개 정보
    url: https://www.match-a-lot.store


logging:
  level:
    root: INFO
    
    # 애플리케이션 상세 
    com.smwu.matchalot: INFO
    
    # Spring Security 관련 상세 
    org.springframework.security: DEBUG
    org.springframework.security.web: DEBUG
    org.springframework.security.oauth2: DEBUG
    org.springframework.security.web.server.csrf: TRACE
    org.springframework.security.web.server.authentication: DEBUG
    
    # OAuth2 관련 상세 
    org.springframework.security.oauth2.client: DEBUG
    org.springframework.security.oauth2.core: DEBUG
    org.springframework.security.web.server.authentication.oauth2: DEBUG
    
    # 웹 요청 관련 
    org.springframework.web: DEBUG
    org.springframework.web.server: DEBUG
    org.springframework.web.reactive: DEBUG
    
    # DB
    org.springframework.r2dbc: DEBUG
    org.springframework.r2dbc.core: DEBUG
    org.springframework.data.r2dbc: DEBUG
    io.r2dbc.postgresql: DEBUG
    
    # Flyway 
    org.flywaydb: DEBUG
    
    # Reactor (비동기) 관련
    reactor.netty: DEBUG
    reactor.core: DEBUG
    
    # HTTP 클라이언트 (OAuth2 토큰 요청)
    org.springframework.web.reactive.function.client: DEBUG
    
    # JWT 관련 
    org.springframework.security.jwt: DEBUG
    
    # 일반적인 Spring Boot 
    org.springframework.boot: INFO
    org.springframework.context: DEBUG
    
  # 로그 패턴 적용
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%logger{36}] - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%logger{50}] - %msg%n"

  loggers:
    # HTTP 요청/응답 상세 
    org.springframework.web.server.adapter.HttpWebHandlerAdapter: DEBUG
    
    # 쿠키 관련 
    org.springframework.http.server.reactive: DEBUG
    
    # 세션 관련 
    org.springframework.session: DEBUG



management:
  endpoints:
    web:
      exposure:
        include: health,info,env,loggers
  endpoint:
    health:
      show-details: always
    loggers:
      enabled: true
