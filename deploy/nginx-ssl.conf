user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    server_tokens off;
    
    client_body_timeout 60s;
    client_header_timeout 60s;
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # 상세 로그 포맷(보안모니터링용)
    log_format security '$remote_addr - $remote_user [$time_local] '
                       '"$request" $status $body_bytes_sent '
                       '"$http_referer" "$http_user_agent" '
                       '$request_time $upstream_response_time '
                       '"$http_x_forwarded_for"';

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                   '$status $body_bytes_sent "$http_referer" '
                   '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    map $request_uri $blocked_uri {
        ~*\.(git|env|config|sql|bak)$ 1;
        ~*/\.\./ 1;
        ~*/(wp-admin|phpmyadmin|admin\.php) 1;
        default 0;
    }
    
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 20M;

    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/s;

    # Blue-Green 배포를 위한 upstream (동적으로 변경됨)
    upstream backend {
        server matchalot-blue:8080;  # 배포 시 blue/green으로 자동 변경
        keepalive 32;
    }

    upstream prometheus {
        server matchalot-prometheus:9090;
    }

    upstream grafana {
        server matchalot-grafana:3000;
    }

    map $http_origin $allowed_origin {
        "https://www.match-a-lot.store" $http_origin;
        "https://matchalot.vercel.app" $http_origin;  # Vercel 도메인 추가
        default "";
    }

    server {
        listen 80;
        server_name api.match-a-lot.store;
        
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }
        
        location / {
            return 301 https://$server_name$request_uri;
        }
    }

    server {
        listen 443 ssl;
        http2 on;
        server_name api.match-a-lot.store;
        
        add_header X-Frame-Options "ALLOW-FROM https://www.match-a-lot.store" always;
        
        ssl_certificate /etc/letsencrypt/live/api.match-a-lot.store/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/api.match-a-lot.store/privkey.pem;
        
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        
        access_log /var/log/nginx/security.log security;

        if ($blocked_uri = 1) {
            return 444;
        }
        
        if ($request_method !~ ^(GET|POST|PUT|DELETE|OPTIONS|HEAD)$) {
            return 405;
        }

        # User-Agent 기반 봇 차단
        if ($http_user_agent ~* (bot|crawler|spider|scraper|scanner)) {
            return 444;
        }

        # SQL 인젝션 패턴 차단
        if ($args ~* "(union|select|insert|delete|update|drop|exec|script)" ) {
            return 444;
        }

        location = / {
            add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
            add_header X-Content-Type-Options nosniff always;
            add_header Content-Type application/json;
            
            add_header Access-Control-Allow-Origin $allowed_origin always;
            add_header Access-Control-Allow-Credentials "true" always;

            return 200 '{"service":"Match-a-lot API","version":"1.0","frontend":"https://matchalot.vercel.app"}';
        }

        location /api/v1/notifications/stream {
            proxy_pass http://backend;
            proxy_http_version 1.1;

            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Accel-Buffering no;

            # 쿠키 전달
            proxy_set_header Cookie $http_cookie;
            proxy_pass_header Set-Cookie;

            # SSE 스트리밍
            chunked_transfer_encoding on;

            proxy_connect_timeout 3600s;
            proxy_send_timeout 3600s;  # 1시간
            proxy_read_timeout 3600s;

            proxy_cache off;
            proxy_buffering off;
        }
        
        location /api/ {
            limit_req zone=api burst=20 nodelay;
            
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;

            # 쿠키 설정
            proxy_set_header Cookie $http_cookie;
            proxy_pass_header Set-Cookie;
            
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
        }

        location ~* \.(sql|bak|backup|old|orig|save)$ {
            deny all;
            access_log off;
            log_not_found off;
        }

        location /actuator/ {
            limit_req zone=api burst=5 nodelay;
            
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /oauth2/ {
            limit_req zone=auth burst=10 nodelay;

            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;

            proxy_set_header Cookie $http_cookie;
            proxy_pass_header Set-Cookie;
        }

        location /login/ {
            limit_req zone=auth burst=10 nodelay;

            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;
    
            proxy_set_header Cookie $http_cookie;
            proxy_pass_header Set-Cookie;
            
            proxy_cookie_domain backend api.match-a-lot.store;
            proxy_cookie_path / /;
        }

        location /prometheus/ {
            # .htpasswd는 서버에서 별도 생성 필요
            auth_basic "Prometheus";
            auth_basic_user_file /etc/nginx/.htpasswd;
            
            proxy_pass http://prometheus/prometheus/;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /grafana/ {
            # .htpasswd는 서버에서 별도 생성 필요
            auth_basic "Grafana";
            auth_basic_user_file /etc/nginx/.htpasswd;
            
            proxy_pass http://grafana/;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }

        location ~* \.(php|asp|jsp|cgi)$ {
            return 444;
        }
        
        location ~* ^/(wp-|admin|download) {
            return 444;
        }
        
        location ~ \.(sql|env|config)$ {
            deny all;
            access_log off;
            log_not_found off;
        }

        location / {
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin $allowed_origin always;
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
                add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-CSRF-Token, X-XSRF-TOKEN" always;
                add_header Access-Control-Allow-Credentials "true" always;
                add_header Access-Control-Max-Age 3600;
                add_header Content-Type "text/plain charset=UTF-8";
                add_header Content-Length 0;
                return 204;
            }

            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;

            # 쿠키 전달
            proxy_set_header Cookie $http_cookie;
            proxy_pass_header Set-Cookie;
        }
    }
}