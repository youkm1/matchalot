name: Build and Deploy
on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'build.gradle'
      - 'Dockerfile'
      - 'settings.gradle'
  workflow_dispatch:  # 수동 실행 가능

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      
      - name: Build with Gradle
        run: ./gradlew build -x test --no-daemon
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/matchalot-vm:latest
            ${{ secrets.DOCKER_USERNAME }}/matchalot-vm:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            JAR_FILE=build/libs/*.jar

  deploy:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - name: Blue-Green Deploy to Azure VM
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: 22
          timeout: 300s
          script: |
            echo "=== Blue-Green 배포 시작 ==="
            
            # Docker Hub에서 최신 이미지 Pull
            echo "=== Docker 이미지 Pull 중 ==="
            docker pull ${{ secrets.DOCKER_USERNAME }}/matchalot-vm:latest
            
            # 현재 활성 환경 확인
            echo "=== 현재 활성 환경 확인 중 ==="
            if docker ps --format '{{.Names}}' | grep -q "matchalot-blue"; then
              CURRENT_ENV="blue"
              TARGET_ENV="green"
              TARGET_PORT=8081
            elif docker ps --format '{{.Names}}' | grep -q "matchalot-green"; then
              CURRENT_ENV="green"
              TARGET_ENV="blue"
              TARGET_PORT=8080
            else
              CURRENT_ENV="none"
              TARGET_ENV="blue"
              TARGET_PORT=8080
            fi
            
            echo "현재 활성: $CURRENT_ENV | 배포 대상: $TARGET_ENV (포트: $TARGET_PORT)"
            
            # 기존 타겟 컨테이너 정리
            docker stop matchalot-$TARGET_ENV 2>/dev/null || true
            docker rm matchalot-$TARGET_ENV 2>/dev/null || true
            
            # 새 컨테이너 실행
            echo "=== $TARGET_ENV 환경 시작 중 ==="
            docker run -d \
              --name matchalot-$TARGET_ENV \
              -p $TARGET_PORT:8080 \
              --network matchalot-network \
              -e DB_HOST=${{ secrets.DB_HOST }} \
              -e DB_PORT=${{ secrets.DB_PORT }} \
              -e DB_NAME=${{ secrets.DB_NAME }} \
              -e DB_USERNAME=${{ secrets.DB_USERNAME }} \
              -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
              -e ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL }} \
              -e GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }} \
              -e GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }} \
              -e JWT_SECRET=${{ secrets.JWT_SECRET }} \
              -e SPRING_PROFILES_ACTIVE=prod \
              --restart unless-stopped \
              ${{ secrets.DOCKER_USERNAME }}/matchalot-vm:latest
            
            # 헬스체크
            echo "=== 헬스체크 중 ==="
            for i in {1..30}; do
              if curl -f -s http://localhost:$TARGET_PORT/actuator/health > /dev/null 2>&1; then
                echo "$TARGET_ENV 환경 준비 완료!"
                break
              fi
              if [ $i -eq 30 ]; then
                echo "헬스체크 실패!"
                docker logs matchalot-$TARGET_ENV --tail 50
                docker stop matchalot-$TARGET_ENV
                docker rm matchalot-$TARGET_ENV
                exit 1
              fi
              sleep 2
            done
            
            # nginx 업데이트 및 트래픽 전환
            echo "=== nginx 업데이트 중 ==="
            
            # nginx 이미지 pull
            docker pull ${{ secrets.DOCKER_USERNAME }}/matchalot-vm-nginx:latest
            
            # 새로운 nginx 설정으로 업데이트
            docker stop matchalot-nginx 2>/dev/null || true
            docker rm matchalot-nginx 2>/dev/null || true
            
            # 네트워크 생성 (없으면)
            docker network create matchalot-network 2>/dev/null || true
            
            # nginx 컨테이너 재시작 (새 설정으로)
            docker run -d \
              --name matchalot-nginx \
              --network matchalot-network \
              -p 80:80 \
              -p 443:443 \
              -v /etc/letsencrypt:/etc/letsencrypt:ro \
              -v /var/www/certbot:/var/www/certbot \
              -e TARGET_ENV=$TARGET_ENV \
              --restart unless-stopped \
              ${{ secrets.DOCKER_USERNAME }}/matchalot-vm-nginx:latest
            
            # nginx 내부에서 설정 변경
            sleep 5
            docker exec matchalot-nginx sh -c "sed -i 's/matchalot-blue:8080/matchalot-$TARGET_ENV:8080/g; s/matchalot-green:8080/matchalot-$TARGET_ENV:8080/g' /etc/nginx/nginx.conf"
            docker exec matchalot-nginx nginx -s reload
            
            echo "nginx 트래픽 전환 완료!"
            
            # 기존 백엔드 컨테이너 정리 (nginx 업데이트 후)
            if [ "$CURRENT_ENV" != "none" ]; then
              sleep 10
              docker stop matchalot-$CURRENT_ENV 2>/dev/null || true
              docker rm matchalot-$CURRENT_ENV 2>/dev/null || true
              echo "기존 $CURRENT_ENV 환경 정리 완료"
            fi
            
            # 오래된 이미지 정리
            docker image prune -f
            
            echo "=== 배포 완료 ==="
            docker ps --filter "name=matchalot" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"