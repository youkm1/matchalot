name: Deploy 
on:
  push:
    branches: [ main ]
    paths:  
      - 'src/**'
      - 'build.gradle'
      - 'Dockerfile'
      - 'settings.gradle'  

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4 
      
    - name: Deploy to Azure VM
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: 22
        timeout: 300s
        script: |
          echo "=== 코드 업데이트 시작 ==="
          cd /home/youkm0806/matchalot/backend
          git fetch origin main
          git reset --hard origin/main
          git clean -fd 
          
          echo "=== Docker 빌드 및 배포 시작 ==="
          cd ../devops
          
          # 기존 backend 컨테이너 정리
          docker-compose stop backend || true
          docker-compose rm -f backend || true
          
          # 기존 이미지도 삭제 (완전 새로 빌드)
          docker rmi devops_backend || true
          
          # backend 이미지 재빌드 및 시작 (Docker 내부에서 Gradle 빌드)
          docker-compose up --build -d backend
          
          echo "=== 배포 상태 확인 (60초 대기) ==="
          sleep 60
          
          # 컨테이너 상태 확인
          if ! docker-compose ps backend | grep -q "Up"; then
            echo "Backend 컨테이너가 실행되지 않음!"
            echo "=== 컨테이너 로그 ==="
            docker-compose logs backend --tail 50
            echo "=== 빌드 중간 컨테이너 확인 ==="
            docker ps -a | grep matchalot
            exit 1
          fi
          
          echo "=== API 헬스체크 시작 ==="
          # API 헬스체크 (10번 재시도, 각 15초 간격)
          for i in {1..10}; do
            echo "헬스체크 시도 $i/10..."
            if curl -f -s http://localhost:8080/actuator/health; then
              echo ""
              echo "배포 성공! (시도 $i/10)"
              docker-compose ps backend
              exit 0
            else
              echo "헬스체크 실패, 15초 후 재시도..."
              if [ $i -eq 10 ]; then
                echo "배포 실패 - 헬스체크 최종 실패"
                echo "=== 최신 로그 ==="
                docker-compose logs backend --tail 30
                echo "=== 컨테이너 상태 ==="
                docker-compose ps backend
                exit 1
              fi
              sleep 15
            fi
          done
